class Duck{	constructor(name){		this.name=name;	}	eat(water){		console.log(`喝${water}`);	}}class Tang{	constructor(name){		this.duck=new Duck(name);	}	eat(food){		this.duck.eat(food);		console.log('thank you~')	}}/*装饰器模式是将一个对象嵌入另一个对象之中，实际上相当于这个对象被另一个对象包装起来，形成一条包装链。请求随着这条链条依次传递到所有的对象，每个对象有处理这个请求的机会。在原有类的基础上通过重写原有的方法进行逻辑增强，装饰器模式有时会优于继承。有 咖啡 基类，上有make方法，增强：加牛奶类、加糖类，把咖啡基类的实例传递给加牛奶类，挂载到加牛奶类属性上，再重写一些增强逻辑将原有咖啡基类的make方法包装一层，也就是将咖啡基类也包装了一层AOP ：在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程可以通过预编译方式和运行期动态代理实现在不修改源代码的情况下给程序动态统一添加功能的一种技术AOP 就是在函数执行之前或之后添加一些额外的逻辑，而不需要修改函数的功能 */